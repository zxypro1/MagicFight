var util = require('util');

var bleno = require('bleno');

var BlenoCharacteristic = bleno.Characteristic;

var GenericCharacteristic = function(uuid, onWriteRequest) {
  GenericCharacteristic.super_.call(this, {
    uuid: uuid,
    properties: ['read', 'write', 'notify'],
    value: null,
  });
  this._onWriteCharacteristic = onWriteRequest;
  this._value = new Buffer(0);
  this._updateValueCallback = null;
  this.setValue = function(data, notify)
  {
    if(data != null && typeof data === 'string')
    {
      this._value = Array.from(data, (x) => x.charCodeAt(0)) 
      if (this._updateValueCallback && notify) {
        this._updateValueCallback(this._value);
      }
    }
  }

};

util.inherits(GenericCharacteristic, BlenoCharacteristic);

GenericCharacteristic.prototype.onReadRequest = function(offset, callback) {
  console.log('GenericCharacteristic - onReadRequest: value = ' + this._value.toString('hex'));

  callback(this.RESULT_SUCCESS, this._value);
};

GenericCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {
  this._value = data;

  console.log('GenericCharacteristic - onWriteRequest: value = ' + this._value.toString('hex'));

  if (this._onWriteCharacteristic) {

    this._onWriteCharacteristic(this._value, this);
  }

  callback(this.RESULT_SUCCESS);
};

GenericCharacteristic.prototype.onSubscribe = function(maxValueSize, updateValueCallback) {
  console.log('GenericCharacteristic - onSubscribe');

  this._updateValueCallback = updateValueCallback;
};

GenericCharacteristic.prototype.onUnsubscribe = function() {
  console.log('GenericCharacteristic - onUnsubscribe');

  this._updateValueCallback = null;
};

module.exports = GenericCharacteristic;